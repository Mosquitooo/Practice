TCP/IP
1. TCP/IP各层的结构与功能，都有哪些协议。
	应用层: SMTP FTP HTTP
	传输层: TCP UDP
	网际互联层: IP
	网络接口层

2. TCP与UDP的区别。
	TCP: 面向连接 可靠 适用一次传输大量数据和要求得到响应的应用程序
	UDP: 无连接 不可靠 适用小量数据，可靠性由应用层负责

3. TCP报文结构。
	
4. TCP的三次握手与四次挥手过程，各个状态名称与含义，TIMEWAIT的作用。
	
	TIMEWAIT的作用：
	1. 要实现TCP全双工连接的正常终止，必须处理终止序列四个分节中任何一个分节的丢失情况，
		主动关闭 的客户端必须维持状态信息进入TIME_WAIT状态。
		
	2. TCP不允许处于TIME_WAIT状态的连接启动一个新的化身，
		因为TIME_WAIT状态持续2MSL，就可以保证当成功建立一个TCP连接的时候，来自连接先前化身的重复分组已经在网络中消逝。
		
5. TCP拥塞控制。
	慢启动算法：慢启动的意思是，刚刚加入网络的连接，一点一点地提速。
		慢启动的算法如下(cwnd全称Congestion Window)：
		1）连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。
		2）每当收到一个ACK，cwnd++; 呈线性上升
		3）每当过了一个RTT，cwnd = cwnd*2; 呈指数让升
		
	拥塞避免：
		当cwnd >= ssthresh时，就会进入“拥塞避免算法”。一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后，算法如下：
		1）收到一个ACK时，cwnd = cwnd + 1/cwnd
		2）当每过一个RTT时，cwnd = cwnd + 1
		这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。
		
	拥塞发生：
		
	快速恢复:
		Fast Recovery算法如下：
		cwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）
		重传Duplicated ACKs指定的数据包
		如果再收到 duplicated Acks，那么cwnd = cwnd +1
		如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。

6. TCP滑动窗口与回退N针协议。

Nagle算法: 避免发送大量小包
	

CORK算法 : 理想情况下，完全避免发送小包，只发送满包以及不得不发的小包.
			CORK并不会将连接完全塞住。
			内核其实并不知道应用层到底什么时候会发送第二批数据用于和第一批数据拼接以达到MTU的大小，
			因此内核会给出一个时间限制，在该时间内没有拼接成一个大包（努力接近MTU）的话，内核就会无条件发送。
			也就是说若应用层程序发送小包数据的间隔不够短时，TCP_CORK就没有一点作用，
			反而失去了数据的实时性（每个小包数据都会延时一定时间再发送）。

延迟确认机制:
	Server接收到数据之后并不会马上回复ACK, 而是等待一段时间希望ACK和应答数据一起发送

7. Http的报文结构。
	
8. Http的状态码含义。
	
9. Http request的几种类型。
	
10. Http1.1和Http1.0的区别
	
11. Http怎么处理长连接。
	
12. Cookie与Session的作用于原理。
	
13. 电脑上访问一个网页，整个过程是怎么样的：DNS、HTTP、TCP、OSPF、IP、ARP。
	
14. Ping的整个过程。ICMP报文是什么。
	
15. C/S模式下使用socket通信，几个关键函数。
	socket: 创建一个套接字
	bind: 
	listen:
	accept:
	read:
	write:

16. IP地址分类。
	A类地址:
	B类地址:
	C类地址:

17. 路由器与交换机区别。

网络其实大体分为两块，一个TCP协议，一个HTTP协议，只要把这两块以及相关协议搞清楚，一般问题不大。
推荐书籍：《TCP/IP协议族》
 
