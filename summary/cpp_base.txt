1. 多态性有哪些。(一个接口、多种实现)
	编译时多态性：通过重载函数实现
	运行时多态性：通过虚函数实现

2. 动态绑定怎么实现
	通过类对象中的vptr和虚函数的索引值.
	vptr指向类的虚函数表. 虚函数表中保存虚函数的真实地址, 同时在编译期确定虚函数的索引。

3. 类型转换有哪些
	static_cast: 基本数据类型的转换
	const_cast: const属性的转换
	dynmic_cast: 继承链上的指针转换
	reinterpret_cast: 不同类型指针之间的相互转换. 或者指针转成整型

4. +操作符如何定义
	friend const T operator+(const T& t1,const T&t2);
	重载为类的友元函数: 运算符函数需要访问累的私有成员, 所以重载为友元函数
	
	const T operator+(const T&t2);
	重载为类的成员函数:
	
	一般将单目运算符重载为成员函数，将双目运算符重载为友元函数。

5. 内存对齐的原则
	变量的起始位置是类型的整数倍.
	总体大小是类行最大大小的整数倍.
	
6. 模版怎么实现
	template关键字：

7. 指针和const的用法
	const int *p:
	int const *p:
	int * const p:
	const int const *p:
	

8. 虚函数，纯虚函数，虚析构
	

9. 内联函数、与宏函数的区别
	宏: 在编译之前进行, 只做简单的替换. 不经计算直接替换参数.
	内联:编译之后在执行时调用，会对参数进行检查

10. const用处和优点
	10.1: 加在变量声明前: 表明变量不可改变
	10.2: 加在函数时, 表明函数不会改变成员变量

11. 基本排序算法实现，最好时间复杂度 和 平均时间复杂度
	略：

12. extern C 作用
	指示编译器按照C语言进行编译，实现C语言与其它语言的混合编程
	
13. C与C++的区别
	C: 面向过程、着重数据结构与算法. 对输入进行处理得到输出.
	c++：面向对象、

14. 继承机制中对象是怎样转换的

15. 继承机制中引用和指针如何转换

16. 虚函数，虚函数表里的内存如何分配
	16.1: 虚函数在代码段
	16.2：虚函数表中的数据在运行起不会改变. 所以是放在只读区域.

17. 如何实现只能动态分配类对象，不能定义类对象？
	17.1：把构造函数变为私有
	17.2: 定义新的接口返回在堆上分配的对象


18. 红黑树的定义和解释？
	

19. 静态成员函数和静态数据成员有什么意义？
	19.1: 可以不通过对象实体调用.

20. 模版特化的概念，为什么特化？
		模版特化: 模版参数在某种特定类型下的实现称为模版特化
		根据某个类型进行特殊处理。

21. explicit是干什么用的？
	21.1: 阻止构造函数的隐式调用. 要求内的使用者必须显示调用类的构造函数. 在重载构造函数时. 明确函数调用
	
22. strcpy返回类型有什么作用？
	实现链式表达

23. 内存溢出有那些因素？
	23.1: 往缓冲区写入的数据大小超过了分配的大小
	23.2: 递归层数过大导致溢出
	23.3: 数据库取出的数据过多.

24. 为什么要用static_cast转换而不用c语言中的转换？
	24.1: static_case会检查转换的合法性, C则不会

25. 异常机制是怎么回事？

26. 迭代器删除元素的会发生什么？
	26.1: 对于关联式容器. 仅仅会使当前元素的迭代器失效. erase没有返回值
	26.2: 对于序列式容器. 会使后面所有元素的迭代器失效. 序列式容器使用了连续内存，删除元素时，后序元素会往前移.
	26.2：对于list. 它内存不连续，erase会返回下一个有效的迭代器

27. 必须在构造函数初始化式里进行初始化的数据成员有哪些？
	27.1: 常量成员
	27.2: 引用

28.  auto_ptr类的实现
	
